user root;
worker_processes 1;
pid /var/run/nginx.pid;
error_log /dev/stdout info;
daemon off;

events {
    worker_connections 1024;
}

http {
    include             mime.types;
    default_type        application/octet-stream;
    
    # Use /tmp for all temp paths (always writable)
    client_body_temp_path /tmp/nginx/client_body;
    proxy_temp_path /tmp/nginx/proxy;
    fastcgi_temp_path /tmp/nginx/fastcgi;
    uwsgi_temp_path /tmp/nginx/uwsgi;
    scgi_temp_path /tmp/nginx/scgi;
    
    sendfile            on;
    keepalive_timeout   65;
    proxy_read_timeout  1200;
    gzip                on;
    gzip_disable        "msie6";

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Extract ingress token from URL
    map $request_uri $ingress_token {
        ~^/api/hassio_ingress/([^/]+) $1;
        default "";
    }

    # Ingress - All requests come through Home Assistant
    server {
        listen 8099 default_server;

        allow   172.30.32.2;
        deny    all;

        server_name _;
        access_log /dev/stdout combined;

        client_max_body_size 4G;
        keepalive_timeout 5;

        root /dev/null;

        # Handle CSS assets specifically - most specific first
        location ~ ^/api/hassio_ingress/([^/]+)/skin/.*\.css {
            rewrite ^/api/hassio_ingress/[^/]+/(.*)$ /$1 break;
            
            proxy_pass http://127.0.0.1:8090;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            
            # Force correct MIME type for CSS
            add_header Content-Type "text/css" always;
        }
        
        # Handle JS assets specifically
        location ~ ^/api/hassio_ingress/([^/]+)/skin/.*\.js {
            rewrite ^/api/hassio_ingress/[^/]+/(.*)$ /$1 break;
            
            proxy_pass http://127.0.0.1:8090;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            
            # Force correct MIME type for JavaScript
            add_header Content-Type "application/javascript" always;
        }
        
        # Handle image assets (SVG, PNG, ICO)
        location ~ ^/api/hassio_ingress/([^/]+)/skin/.*\.(svg|png|ico) {
            rewrite ^/api/hassio_ingress/[^/]+/(.*)$ /$1 break;
            
            proxy_pass http://127.0.0.1:8090;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
        }
        
        # Handle all other asset requests (skin/, catalog/, etc.)
        location ~ ^/api/hassio_ingress/([^/]+)/(skin|catalog)/ {
            rewrite ^/api/hassio_ingress/[^/]+/(.*)$ /$1 break;
            
            proxy_pass http://127.0.0.1:8090;
            proxy_http_version 1.1;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
        }
        
        # Handle main page requests and rewrite HTML content
        location ~ ^/api/hassio_ingress/([^/]+)(.*)$ {
            set $token $1;
            set $path $2;
            
            proxy_pass http://127.0.0.1:8090$path;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
            
            # Enable sub_filter for HTML content only
            sub_filter_once off;
            sub_filter_types text/html;
            
            # Rewrite asset URLs in HTML to use full ingress path
            sub_filter 'href="/skin/' 'href="/api/hassio_ingress/$token/skin/';
            sub_filter 'src="/skin/' 'src="/api/hassio_ingress/$token/skin/';
            sub_filter 'href="/catalog/' 'href="/api/hassio_ingress/$token/catalog/';
            sub_filter 'action="/search' 'action="/api/hassio_ingress/$token/search';
            sub_filter 'href="/nojs' 'href="/api/hassio_ingress/$token/nojs';
        }
        
        # Fallback for any other requests
        location / {
            proxy_pass http://127.0.0.1:8090;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            proxy_set_header X-NginX-Proxy true;
        }
    }
}
