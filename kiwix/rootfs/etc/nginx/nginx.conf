user root;
worker_processes 1;
pid /var/run/nginx.pid;
error_log /dev/stdout info;
daemon off;

events {
    worker_connections 1024;
}

http {
    include             mime.types;
    default_type        application/octet-stream;
    
    # Use /tmp for all temp paths (always writable)
    client_body_temp_path /tmp/nginx/client_body;
    proxy_temp_path /tmp/nginx/proxy;
    fastcgi_temp_path /tmp/nginx/fastcgi;
    uwsgi_temp_path /tmp/nginx/uwsgi;
    scgi_temp_path /tmp/nginx/scgi;
    
    sendfile            on;
    keepalive_timeout   65;
    proxy_read_timeout  1200;
    gzip                on;
    gzip_disable        "msie6";

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # Ingress - Main server 
    server {
        listen 8099 default_server;

        server_name _;
        access_log /dev/stdout combined;

        client_max_body_size 4G;
        keepalive_timeout 5;

        root /dev/null;

        # Strip the ingress path before forwarding to kiwix-serve
        location ~ ^/api/hassio_ingress/[^/]+(.*)$ {
            set $backend_path $1;
            
            # Remove restrictive headers that can break iframe embedding
            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Frame-Options;
            proxy_hide_header X-Content-Type-Options;
            
            # Configure proxy to kiwix-serve - pass the clean path
            proxy_pass http://127.0.0.1:8090$backend_path$is_args$args;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-NginX-Proxy true;
            
            # Make kiwix-serve think it's on the root path
            proxy_set_header Host $host:8090;
            proxy_set_header X-Forwarded-Host $host:8090;
            proxy_set_header X-Forwarded-Port 8090;
            
            # Rewrite response content to add ingress path back
            proxy_set_header Accept-Encoding "";
            sub_filter_types text/html text/css text/javascript application/javascript application/json;
            sub_filter_once off;
            
            # Extract ingress path from request URI
            set $ingress_path "";
            if ($request_uri ~ ^(/api/hassio_ingress/[^/]+)) {
                set $ingress_path $1;
            }
            
            # Only rewrite absolute paths that don't already have ingress path
            sub_filter 'href="/' 'href="$ingress_path/';
            sub_filter 'src="/' 'src="$ingress_path/';
            sub_filter 'action="/' 'action="$ingress_path/';
            sub_filter "href='/" "href='$ingress_path/";
            sub_filter "src='/" "src='$ingress_path/";
            sub_filter 'url("/' 'url("$ingress_path/';
            sub_filter "url('/" "url('$ingress_path/";
            
            # Handle redirects by adding ingress path back
            proxy_redirect ~^http://.*:8090(.*)$ $ingress_path$1;
            proxy_redirect ~^/(.*)$ $ingress_path/$1;
        }
        
        # Fallback for requests without ingress path - redirect to add it
        location / {
            return 302 $http_x_ingress_path/;
        }
    }
}
